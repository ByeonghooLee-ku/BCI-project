%% Modified by LBH
%% Modified by LBH V2 20200622
%% initiate
bbci_acquire_bv('close');
startup_bbci;

jc = JacoComm;
connect(jc);
calibrateFingers(jc);

%% Query individual object properties, robotic arm initialization
jc.JointPos
%%
jc.JointVel
%%
jc.JointTorque
%%
jc.JointTemp
%%
jc.FingerPos
%%
jc.FingerVel
%%
jc.FingerTorque
%%
jc.FingerTemp
%%
jc.EndEffectorPose
%%
jc.EndEffectorWrench
%%
jc.ProtectionZone
%%
jc.EndEffectorOffset
%%
jc.DOF
%%
jc.TrajectoryInfo

%% Methods to query joint and finger values all at once
%% 팔 관절 각도 값과 손가락 관절 각도 값을 리턴
pos = getJointAndFingerPos(jc);
%%
%% 팔 관절 속도 값과 손가락 관절 속도 값을 리턴
vel = getJointAndFingerVel(jc);
%%
%% 팔 관절 토크 값과 손가락 관절 토크 값을 리턴
torque = getJointAndFingerTorque(jc);
temp = getJointAndFingerTemp(jc);

setPositionControlMode(jc);
goToHomePosition(jc);

current_pos=jc.EndEffectorPose;
home_pos=jc.EndEffectorPose;
previous_pos=current_pos;

setPositionControlMode(jc);
fCmd = 0*ones(3,1);
sendFingerPositionCommand(jc,fCmd);

%% Load EEG_Mat file
global EEG_MAT_DIR
EEG_MAT_DIR = '';

dd = 'MotorImagery Converted Data\';
filelist= {'training file name'};

%% Pretraining CSP with LDA
Bandpass_Filter = [8 24]; % Bandpass filter range

% Offline Classifier Training
[cnt, mrk, mnt] = eegfile_loadMatlab([dd filelist{1}]); % Loading training data

ival = [0 3000]; % Set interval

cnt_filt = proc_filtButter(cnt, 5, Bandpass_Filter); % Bandpass filtering in cnt data
epo = cntToEpo(cnt_filt,mrk,ival); % Transform: cnt -> epo

[fv, Out.csp_w]=  proc_multicsp(epo, 6); % Perform CSP training #proc_multicsp(input, output)
fv = proc_variance(fv); fv= proc_logarithm(fv); % Calculating variance and applying logarithm (CSP)

fv.classifier_param = {'RLDAshrink','prior', nan, 'store_prior', 1, 'store_means', 1, ...
    'store_cov', 1, 'store_invcov', 1, 'scaling', 1};  % Extract classifier parameters

proc = {'wr_multiClass','policy','one-vs-all','coding','hamming'}; % one-vs-all all-pairs

Out.C = trainClassifier(fv, proc); % Classification results
Out.out_eeg = applyClassifier(fv, 'wr_multiClass', Out.C); % Show output
%% Online Initialization
params = struct;
state = bbci_acquire_bv('init', params);
EEG_data = [];
mnt = getElectrodePositions(state.clab);

% Add information in variable epo
epo.clab = state.clab;
epo.fs = state.fs;
epo.title = filelist{1};


while 1
    %% cue
    Block = [1,2,3]; % cue sound
    cue = randi([1 6],1,1)                                                                                                                                    ;
    if cue == 1
        [A,AFs] = audioread('Auditory cue sound file name');
    elseif cue == 2
        [A,AFs] = audioread('Auditory cue sound file name');
    elseif cue == 3
        [A,AFs] = audioread('Auditory cue sound file name');
    elseif cue == 4
        [A,AFs] = audioread('Auditory cue sound file name');
    elseif cue == 5
        [A,AFs] = audioread('Auditory cue sound file name');
    elseif cue == 6
        [A,AFs] = audioread('Auditory cue sound file name');
    end
    sound(A,AFs);
    pause(1);
    disp('Receiving brain signal')
    
    % Connect and initialize EEG recording
    bbci_acquire_bv('close');
    EEG_MAT_DIR = '';
    params=struct;
    state=bbci_acquire_bv('init',params);
    EEGData=[];
    data=[];
    mnt=getElectrodePositions(state.clab);
    epo.clab = state.clab;
    epo.fs = state.fs;
    epo.title = filelist{1};
    pause(1)
    
    % Ready sound
    [B,BFs] = audioread('censor-beep-4.wav');
    sound(B,BFs);
    pause(1)
    
    pause('on');
    pause(5);
    
    data = bbci_acquire_bv(state);
    EEG_data = [EEG_data; data];
    
    % Sampling Rate: 250Hz, get data every 3 sec
    if size(EEG_data,1) >= 750 % 250 *3 = 750
        epo.x = EEG_data;
        
        % EEG filtering`
        Wps= [42 49]/epo.fs*2;
        [n, Ws]= cheb2ord(Wps(1), Wps(2),3, 40);
        [filt.b, filt.a]= cheby2(n, 50, Ws);
        epo = proc_filt(epo, filt.b, filt.a);
        
        % Feature Extraction and Classification
        Classification_Result = MotorImagery_Online_Fn(epo, Bandpass_Filter, Out); %Classification result
        
        disp('Signal processing');
        pause(2);
        disp('Decoding signal');
        
        %% Decision
        switch Classification_Result
            case 1
                disp('Left');
                disp('robotic arm activation');
                
                % Robotarm control
                home_pos=jc.EndEffectorPose;
                current_pos=jc.EndEffectorPose;
                prev_pos=current_pos;
                
                x = 'Write desired x axis point';
                y = 'Write desired y axis point';
                
                desired_pos=[x; -y; 0.04; home_pos(4); home_pos(5); home_pos(6)];
                moveToCP(jc,desired_pos);
                
                pause(1);
                
            case 2
                disp('Forward');
                disp('robotic arm activation');
                
                % Robotarm control
                home_pos=jc.EndEffectorPose;
                current_pos=jc.EndEffectorPose;
                prev_pos=current_pos;
                
                x = 'Write desired x axis point';
                y = 'Write desired y axis point';
                
                desired_pos=[x; -y; 0.07; home_pos(4); home_pos(5); home_pos(6)];
                moveToCP(jc,desired_pos);
                
                pause(1);
                
            case 3
                disp('Right');
                disp('robotic arm activation');
                
                % Robotarm control
                home_pos=jc.EndEffectorPose;
                current_pos=jc.EndEffectorPose;
                prev_pos=current_pos;
                
                x = 'Write desired x axis point';
                y = 'Write desired y axis point';
                
                desired_pos=[x; -y; 0.04; home_pos(4); home_pos(5); home_pos(6)];
                moveToCP(jc,desired_pos);
                
                pause(1);
                
            case 4
                disp('Twist: Left');
                disp('robotic arm activation');
                
                % Robotarm control
                home_pos=jc.EndEffectorPose;
                current_pos=jc.EndEffectorPose;
                prev_pos=current_pos;
                
                x = 'Write desired degree for twist';
                
                jntVelCmd = [0;0;0;0;0;0;-0.5]; %7DOF
                for i=1:x
                    sendJointVelocityCommand(jc,jntVelCmd);
                end
                
            case 5
                disp('Twist: Right');
                disp('robotic arm activation');
                
                % Robotarm control
                home_pos=jc.EndEffectorPose;
                current_pos=jc.EndEffectorPose;
                prev_pos=current_pos;
                
                x = 'Write desired degree for twist';
                
                jntVelCmd = [0;0;0;0;0;0;-0.5]; %7DOF
                for i=1:-x
                    sendJointVelocityCommand(jc,jntVelCmd);
                end
                
            case 6
                disp('Grasping');
                disp('robotic arm activation');
                
                % Robotarm control
                home_pos=jc.EndEffectorPose;
                current_pos=jc.EndEffectorPose;
                prev_pos=current_pos;
                
                if sendFingerPositionCommand == 0
                    setPositionControlMode(jc);
                    fCmd = 6000*ones(3,1);
                    sendFingerPositionCommand(jc,fCmd);
                else
                    setPositionControlMode(jc);
                    fCmd = 0*ones(3,1);
                    sendFingerPositionCommand(jc,fCmd);
                end
                
            otherwise
                % Classification error
                disp('Decoding error!');
                [A,AFs] = audioread('censor-beep-4.wav');
                sound(A,AFs);
        end
        
        %% Reset the parameters
        EEG_data = [];
        data=[];
        pause(5);
        
    end
    
end
bbci_acquire_bv('close');
